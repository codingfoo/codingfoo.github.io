<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codingFoo</title>
  <subtitle></subtitle>
  <id>http://www.codingfoo.com/</id>
  <link href="http://www.codingfoo.com/"/>
  <link href="http://www.codingfoo.com/feed.xml" rel="self"/>
  <updated>2016-01-31T17:00:00-07:00</updated>
  <author>
    <name>Bowen Masco</name>
  </author>
  <entry>
    <title>Productively managing email for developers</title>
    <link rel="alternate" href="http://www.codingfoo.com/posts/productively-managing-email/"/>
    <id>http://www.codingfoo.com/posts/productively-managing-email/</id>
    <published>2016-01-31T17:00:00-07:00</published>
    <updated>2017-08-02T12:08:47-06:00</updated>
    <author>
      <name>Bowen Masco</name>
    </author>
    <content type="html">&lt;h1 id="productively-managing-email-for-developers"&gt;Productively managing email for developers&lt;/h1&gt;

&lt;p&gt;As developers attention and focus are very important. I found that email was an
attention killer.&lt;/p&gt;

&lt;p&gt;Here are the things that I did to use email effectively and avoid losing focus.&lt;/p&gt;

&lt;h2 id="disable-email-alerts"&gt;Disable email alerts&lt;/h2&gt;

&lt;p&gt;I turned off all alerts for email. My phone does not even connect to my email
account. Be deliberate about when you check your email.&lt;/p&gt;

&lt;p&gt;We forget that email is an asynchrounous tool.&lt;/p&gt;

&lt;h2 id="schedule-times-to-check-your-email"&gt;Schedule times to check your email&lt;/h2&gt;

&lt;p&gt;I check my email only at specific times of the day. The two best times I have found
are around noon and 4. The exact time is flexible because I don't want to interrupt
something I am working on to check my email. Once I have finished what I am working
on then I will check email.&lt;/p&gt;

&lt;p&gt;Do not check email while waiting for something to complete. It will distract you
from your work.&lt;/p&gt;

&lt;p&gt;Only check it when you will have the time to process your email.&lt;/p&gt;

&lt;h2 id="follow-inbox-to-zero"&gt;Follow inbox to zero&lt;/h2&gt;

&lt;p&gt;The process of inbox to zero is best explained elsewhere:
https://zenhabits.net/inbox-master-get-all-your-inboxes-to-zero-and-have-fewer-inboxes/&lt;/p&gt;

&lt;h2 id="archive-and-search"&gt;Archive and search&lt;/h2&gt;

&lt;p&gt;Research has found that it is faster to just archive and search than it is to sort
emails into folders and look for an email.&lt;/p&gt;

&lt;p&gt;I make two exceptions to the no folders rule. I have a receipts and a waiting folder.
I put receipts into a folder because I often need to look at a date range of the receipts.&lt;/p&gt;

&lt;p&gt;The waiting folder is for any emails for which I am waiting for a reply.&lt;/p&gt;

&lt;h2 id="use-send-it-later-tools"&gt;Use send it later tools&lt;/h2&gt;

&lt;p&gt;Use tools to send emails at a later time, especially if you check your emails
after normal work hours, this way people wont think you are always checking your
email.
Use http://boomerangapp.com/ if you use gmail.&lt;/p&gt;

&lt;p&gt;Use the "Send it later" plugin for thunderbird.&lt;/p&gt;

&lt;h2 id="compose-emails-when-needed-without-looking-at-your-inbox"&gt;Compose emails when needed without looking at your inbox&lt;/h2&gt;

&lt;p&gt;I sometimes need to write emails during the day, however I dont want view my inbox.
You can open a compose window to write an email to avoid being distracted by your inbox.&lt;/p&gt;

&lt;p&gt;Gmail: http://www.kungfugrippe.com/post/45763194525/compose-gmail-message&lt;/p&gt;

&lt;p&gt;Thunderbird on Mac: &lt;code&gt;/Applications/Thunderbird.app/Contents/MacOS/thunderbird-bin -compose&lt;/code&gt;&lt;/p&gt;

&lt;h2 id="dont-use-your-email-as-a-task-list"&gt;Dont use your email as a task list&lt;/h2&gt;

&lt;p&gt;If you use email as your task list then you can be distracted by your inbox when you look at your task emails.&lt;/p&gt;

&lt;p&gt;Make a task list elsewhere.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ruby saml mod on heroku</title>
    <link rel="alternate" href="http://www.codingfoo.com/posts/ruby-saml-mod-on-heroku/"/>
    <id>http://www.codingfoo.com/posts/ruby-saml-mod-on-heroku/</id>
    <published>2015-10-23T18:00:00-06:00</published>
    <updated>2017-08-02T12:08:47-06:00</updated>
    <author>
      <name>Bowen Masco</name>
    </author>
    <content type="html">&lt;h1 id="getting-ruby-saml-mod-to-work-on-heroku"&gt;Getting ruby-saml-mod to work on Heroku.&lt;/h1&gt;

&lt;p&gt;Here are my notes on how to add libraries, that are required by the ruby saml mod gem, to Heroku.&lt;/p&gt;

&lt;p&gt;The ruby saml gem uses the xmlsec and xmlsec-openssl shared libraries. It appears that these libraries are not installed on the Heroku cedar platform.&lt;/p&gt;

&lt;p&gt;Heroku cedar is based on ubuntu 10.04 64-bit. So binary dependencies that are compatible with Heroku can be found on packages.ubuntu.com. Find and download the deb package, and unpack it. ruby-saml-mod depends on libraries that can be found in two debian packages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;libxmlsec1_1.2.9-5ubuntu5_amd64.deb&lt;/li&gt;
  &lt;li&gt;libxmlsec1-openssl_1.2.9-5ubuntu5_amd64.deb&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are on a Mac you can unpack a deb package using the ar utility.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ar -x libxmlsec1-openssl_1.2.9-5ubuntu5_amd64.deb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The library files are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;libxmlsec1.so.1.2.9&lt;/li&gt;
  &lt;li&gt;libxmlsec1-openssl.so.1.2.9&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The files that you need in the directory where the libraries are stored:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;libxmlsec1-openssl.so -&amp;gt; libxmlsec1-openssl.so.1.2.9&lt;/li&gt;
  &lt;li&gt;libxmlsec1-openssl.so.1 -&amp;gt; libxmlsec1-openssl.so.1.2.9&lt;/li&gt;
  &lt;li&gt;libxmlsec1-openssl.so.1.2.9&lt;/li&gt;
  &lt;li&gt;libxmlsec1.so -&amp;gt; libxmlsec1.so.1.2.9&lt;/li&gt;
  &lt;li&gt;libxmlsec1.so.1 -&amp;gt; libxmlsec1.so.1.2.9&lt;/li&gt;
  &lt;li&gt;libxmlsec1.so.1.2.9&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The other files are symlinks to the real libraries. They are required and need to be checked into the repo. Use &lt;code&gt;ls -l&lt;/code&gt; in the directory where the libraries and symlinks live to ensure that the symlinks are relative paths.&lt;/p&gt;

&lt;p&gt;An alternative to committing the files to the repository is to use build packs. If you decide to go the buildpack route, you will probably have to use the multi buildpack.&lt;/p&gt;

&lt;p&gt;When Heroku precompiles assets it uses a different environment than for running the application. So the build will fail, because the saml gem cannot find its library dependencies, even if the runtime environment is configured correctly. One way to work around this situation is to move the require statements for the saml gem into the controller class methods where the gem is used. This way the require is not called during the build step. Another possiblity is to use a Heroku labs feature to use the runtime environment variables for the build environment.&lt;/p&gt;

&lt;p&gt;For the gem to know where to find the library, you need to set the &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; var to the absolute path to the folder with your libs. On Heroku an app lives in the /app directory. So, if your libraries are in the vendor/libs directory in your repository, set &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; to &lt;code&gt;/app/vendor/libs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The saml gem requires the following config variables(listed with an example value):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
entity_id:                      http://serviceprovider.example.com/saml
idp_cert_fingerprint:           ae:io:uy:ae:io:uy
idp_sso_target_url:             https://idp.example.com/idp/
issuer:                         serviceprovider.example.com
name_identifier_format:         urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress
saml_certificate:               /path/to/serviceprovider.example.com.crt
saml_private_key:               /path/to/serviceprovider.example.com.key
support_email:                  example@serviceprovider.example.com.com
tech_contact_email:             example@serviceprovider.example.com.com
tech_contact_name:              Administrator
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;These should be set as Heroku config environment vars and then referenced when creating the ruby-saml-mod settings object.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
saml_settings = Onelogin::Saml::Settings.new
saml_settings.issuer = ENV["issuer"]
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The saml gem requires an ssl cert and key for use in the application. I made it available to the application and keep it from being committed and pushed to the public main repo by using a script that copies the keys, commits, pushes to Heroku, and finally rolls back the commit after the deploy.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>git diff</title>
    <link rel="alternate" href="http://www.codingfoo.com/til/git/git-diff/"/>
    <id>http://www.codingfoo.com/til/git/git-diff/</id>
    <published>2016-06-11T14:52:08-06:00</published>
    <updated>2017-08-02T12:08:47-06:00</updated>
    <author>
      <name>Bowen Masco</name>
    </author>
    <content type="html">&lt;h1 id="git-diff"&gt;Git diff&lt;/h1&gt;

&lt;p&gt;Three dots
&lt;code&gt;
git diff master...develop
&lt;/code&gt;
shows what changed on develop since you forked from master (basically it diffs against how master looked &lt;em&gt;when you branched&lt;/em&gt;) whereas two dots&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git diff master..develop
&lt;/code&gt;
or just
&lt;code&gt;
git diff master develop
&lt;/code&gt;
 shows the difference from master &lt;em&gt;right now&lt;/em&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ssh passphrase in keychain</title>
    <link rel="alternate" href="http://www.codingfoo.com/til/ssh/ssh-passphrase-in-keychain/"/>
    <id>http://www.codingfoo.com/til/ssh/ssh-passphrase-in-keychain/</id>
    <published>2016-06-11T14:52:08-06:00</published>
    <updated>2017-08-02T12:08:47-06:00</updated>
    <author>
      <name>Bowen Masco</name>
    </author>
    <content type="html">&lt;h1 id="passphrase-in-keychain"&gt;Passphrase in Keychain&lt;/h1&gt;

&lt;p&gt;SSH Agent can store passphrases to keys in the login keychain. This way
you dont have to remember to load your key each time you restart your
machine&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
ssh-add -K
ssh-add -K path/to/private_key
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="http://fplanque.com/dev/mac/secure-ssh-private-keys-on-mac-osx-10-5"&gt;blog post&lt;/a&gt;.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Override Secrets Locally</title>
    <link rel="alternate" href="http://www.codingfoo.com/til/software/secrets-override/"/>
    <id>http://www.codingfoo.com/til/software/secrets-override/</id>
    <published>2016-06-11T14:52:08-06:00</published>
    <updated>2017-08-02T12:08:47-06:00</updated>
    <author>
      <name>Bowen Masco</name>
    </author>
    <content type="html">&lt;h1 id="override-secrets-locally"&gt;Override secrets locally&lt;/h1&gt;

&lt;p&gt;When you need to override secrets locally in a yaml file, use:
&lt;code&gt;
 foo_secret: &amp;lt;%= env['FOO'] || 'value' %&amp;gt;
&lt;/code&gt;
to pull in an environment var with the overriding value. The secret that you set
in the environment will be cleared when you close that terminal. This will keep
you from leaving non development values in your secrets file.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>simple server</title>
    <link rel="alternate" href="http://www.codingfoo.com/til/ruby/simple-server/"/>
    <id>http://www.codingfoo.com/til/ruby/simple-server/</id>
    <published>2016-06-11T14:52:08-06:00</published>
    <updated>2017-08-02T12:08:47-06:00</updated>
    <author>
      <name>Bowen Masco</name>
    </author>
    <content type="html">&lt;h1 id="how-to-serve-the-current-dir"&gt;How to serve the current dir&lt;/h1&gt;

&lt;p&gt;There is probably a simpler way to do this, but this will serve the current directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
require 'webrick'
server = WEBrick::HTTPServer.new( {:BindAddress =&amp;gt; '0.0.0.0', :Port =&amp;gt; 3000, :DocumentRoot =&amp;gt; '.'})
server.start
&lt;/code&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>cron</title>
    <link rel="alternate" href="http://www.codingfoo.com/til/devops/cron/"/>
    <id>http://www.codingfoo.com/til/devops/cron/</id>
    <published>2016-06-11T14:52:08-06:00</published>
    <updated>2017-08-02T12:08:47-06:00</updated>
    <author>
      <name>Bowen Masco</name>
    </author>
    <content type="html">&lt;h1 id="how-to-test-cron-jobs"&gt;How to test cron jobs&lt;/h1&gt;

&lt;p&gt;Export the cron env:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
* * * * * env &amp;gt; ~/cronenv
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;then start a shell with the same environment:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
env - `cat ~/cronenv` /bin/sh
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="http://stackoverflow.com/questions/2135478/how-to-simulate-the-environment-cron-executes-a-script-with"&gt;stackoverflow answer 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="http://stackoverflow.com/questions/4984725/how-to-test-cron-job"&gt;stackoverflow answer 2&lt;/a&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Edit Long Commands</title>
    <link rel="alternate" href="http://www.codingfoo.com/til/bash/edit-long-commands/"/>
    <id>http://www.codingfoo.com/til/bash/edit-long-commands/</id>
    <published>2016-06-11T14:52:08-06:00</published>
    <updated>2017-08-02T12:08:47-06:00</updated>
    <author>
      <name>Bowen Masco</name>
    </author>
    <content type="html">&lt;h1 id="how-to-edit-long-commands"&gt;How to edit Long Commands&lt;/h1&gt;

&lt;p&gt;You can use the shortcut&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Ctrl-x Ctrl-e
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to open commands on the command line in an editor.
On save and close the command is run.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>AWS Lamda Use Cases</title>
    <link rel="alternate" href="http://www.codingfoo.com/til/aws/aws-lamda-use-cases/"/>
    <id>http://www.codingfoo.com/til/aws/aws-lamda-use-cases/</id>
    <published>2016-06-10T18:00:00-06:00</published>
    <updated>2017-08-02T12:08:47-06:00</updated>
    <author>
      <name>Bowen Masco</name>
    </author>
    <content type="html">&lt;h1 id="uses-for-aws-lambda"&gt;Uses for AWS Lambda&lt;/h1&gt;

&lt;p&gt;Devops management scripts: dont need dedicated instances.&lt;/p&gt;

&lt;p&gt;Data driven monitoring and response.&lt;/p&gt;

&lt;p&gt;Testing and deployment verification.&lt;/p&gt;
</content>
  </entry>
</feed>
